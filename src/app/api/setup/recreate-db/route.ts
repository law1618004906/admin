import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';
import logger from '../../../../lib/logger';

const db = new PrismaClient();

export async function POST(request: NextRequest) {
  try {
    logger.info('๐ ุฅุนุงุฏุฉ ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ุงูุตูุฑ');

    // ุญุฐู ุฌููุน ุงูุฌุฏุงูู ูุฅุนุงุฏุฉ ุฅูุดุงุฆูุง
    await db.$executeRaw`DROP TABLE IF EXISTS User;`;
    await db.$executeRaw`DROP TABLE IF EXISTS activityLog;`;
    await db.$executeRaw`DROP TABLE IF EXISTS Role;`;
    
    logger.info('๐๏ธ ุชู ุญุฐู ุงูุฌุฏุงูู ุงููุฏููุฉ');

    // ุฅุนุงุฏุฉ ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู Prisma
    await db.$executeRaw`CREATE TABLE "User" (
      "id" TEXT NOT NULL PRIMARY KEY,
      "email" TEXT NOT NULL UNIQUE,
      "password" TEXT NOT NULL,
      "name" TEXT,
      "username" TEXT,
      "phone" TEXT,
      "avatar" TEXT,
      "role" TEXT,
      "isActive" BOOLEAN NOT NULL DEFAULT true,
      "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      "roleId" TEXT,
      FOREIGN KEY ("roleId") REFERENCES "Role" ("id") ON DELETE SET NULL ON UPDATE CASCADE
    );`;

    await db.$executeRaw`CREATE TABLE "Role" (
      "id" TEXT NOT NULL PRIMARY KEY,
      "name" TEXT NOT NULL UNIQUE,
      "nameAr" TEXT,
      "permissions" TEXT,
      "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
    );`;

    await db.$executeRaw`CREATE TABLE "activityLog" (
      "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
      "userId" TEXT,
      "action" TEXT NOT NULL,
      "entityType" TEXT NOT NULL,
      "entityId" TEXT,
      "oldValues" TEXT,
      "newValues" TEXT,
      "ipAddress" TEXT,
      "userAgent" TEXT,
      "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE SET NULL ON UPDATE CASCADE
    );`;

    logger.info('๐๏ธ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ุงูุฌุฏูุฏุฉ');

    // ุฅูุดุงุก ุงููุณุชุฎุฏู ุงููุฏูุฑ
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    await db.$executeRaw`INSERT INTO "User" (
      "id", "email", "password", "name", "username", "phone", "role", "isActive"
    ) VALUES (
      'admin-001', 'admin@hamidawi.com', ${hashedPassword}, 'ูุฏูุฑ ุงููุธุงู', 'admin', '+970000000000', 'ADMIN', true
    );`;

    logger.info('โ ุชู ุฅูุดุงุก ุงููุณุชุฎุฏู ุงููุฏูุฑ ุจูุฌุงุญ');

    // ุงูุชุญูู ูู ุฅูุดุงุก ุงููุณุชุฎุฏู
    const verifyUser = await db.user.findUnique({
      where: { email: 'admin@hamidawi.com' }
    });

    if (!verifyUser) {
      throw new Error('ูุดู ูู ุงูุชุญูู ูู ุฅูุดุงุก ุงููุณุชุฎุฏู');
    }

    return NextResponse.json({
      success: true,
      message: 'ุชู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงููุณุชุฎุฏู ุงููุฏูุฑ ุจูุฌุงุญ',
      user: {
        email: verifyUser.email,
        username: verifyUser.username,
        name: verifyUser.name,
        role: verifyUser.role,
        isActive: verifyUser.isActive,
        createdAt: verifyUser.createdAt
      },
      credentials: {
        email: 'admin@hamidawi.com',
        password: 'admin123',
        note: 'ุงุณุชุฎุฏู ูุฐู ุงูุจูุงูุงุช ูุชุณุฌูู ุงูุฏุฎูู'
      }
    });

  } catch (error) {
    logger.error('โ ูุดู ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช', error);
    
    return NextResponse.json(
      { 
        error: 'ูุดู ูู ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช',
        message: error instanceof Error ? error.message : 'ุฎุทุฃ ุบูุฑ ูุนุฑูู',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}
